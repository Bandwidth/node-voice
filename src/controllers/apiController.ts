/**
 * bandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

import { ApiResponse } from '../apiResponse';
import { ApiError } from '../errors/apiError';
import { ApiErrorResponseError } from '../errors/apiErrorResponseError';
import { RequestOptions } from '../http/requestBuilder';
import {
  ApiCallResponse,
  apiCallResponseSchema,
} from '../models/apiCallResponse';
import {
  ApiCallStateResponse,
  apiCallStateResponseSchema,
} from '../models/apiCallStateResponse';
import {
  ApiCreateCallRequest,
  apiCreateCallRequestSchema,
} from '../models/apiCreateCallRequest';
import {
  ApiModifyCallRequest,
  apiModifyCallRequestSchema,
} from '../models/apiModifyCallRequest';
import {
  ApiTranscribeRecordingRequest,
  apiTranscribeRecordingRequestSchema,
} from '../models/apiTranscribeRecordingRequest';
import {
  CallEngineModifyConferenceRequest,
  callEngineModifyConferenceRequestSchema,
} from '../models/callEngineModifyConferenceRequest';
import {
  ConferenceDetail,
  conferenceDetailSchema,
} from '../models/conferenceDetail';
import {
  ConferenceMemberDetail,
  conferenceMemberDetailSchema,
} from '../models/conferenceMemberDetail';
import {
  ConferenceRecordingMetadataResponse,
  conferenceRecordingMetadataResponseSchema,
} from '../models/conferenceRecordingMetadataResponse';
import {
  ModifyCallRecordingState,
  modifyCallRecordingStateSchema,
} from '../models/modifyCallRecordingState';
import {
  RecordingMetadataResponse,
  recordingMetadataResponseSchema,
} from '../models/recordingMetadataResponse';
import {
  TranscriptionResponse,
  transcriptionResponseSchema,
} from '../models/transcriptionResponse';
import { array, number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class ApiController extends BaseController {
  /**
   * Creates an outbound call
   *
   * @param accountId
   * @param body
   * @return Response from the API call
   */
  async createCall(
    accountId: string,
    body?: ApiCreateCallRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ApiCallResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      accountId: [accountId, string()],
      body: [body, optional(apiCreateCallRequestSchema)],
    });
    req.json(mapped.body);
    req.appendTemplatePath`/api/v2/accounts/${mapped.accountId}/calls`;
    req.throwOn(400, ApiErrorResponseError, 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.');
    req.throwOn(401, ApiError, 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.');
    req.throwOn(403, ApiErrorResponseError, 'User unauthorized to perform this action.');
    req.throwOn(404, ApiErrorResponseError, 'The resource specified cannot be found or does not belong to you.');
    req.throwOn(415, ApiErrorResponseError, 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.');
    req.throwOn(429, ApiErrorResponseError, 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.');
    req.throwOn(500, ApiErrorResponseError, 'Something unexpected happened. Please try again.');
    return req.callAsJson(apiCallResponseSchema, requestOptions);
  }

  /**
   * Returns near-realtime metadata about the specified call
   *
   * @param accountId
   * @param callId
   * @return Response from the API call
   */
  async getCallState(
    accountId: string,
    callId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ApiCallStateResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      accountId: [accountId, string()],
      callId: [callId, string()],
    });
    req.appendTemplatePath`/api/v2/accounts/${mapped.accountId}/calls/${mapped.callId}`;
    req.throwOn(400, ApiErrorResponseError, 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.');
    req.throwOn(401, ApiError, 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.');
    req.throwOn(403, ApiErrorResponseError, 'User unauthorized to perform this action.');
    req.throwOn(404, ApiErrorResponseError, 'The resource specified cannot be found or does not belong to you.');
    req.throwOn(415, ApiErrorResponseError, 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.');
    req.throwOn(429, ApiErrorResponseError, 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.');
    req.throwOn(500, ApiErrorResponseError, 'Something unexpected happened. Please try again.');
    return req.callAsJson(apiCallStateResponseSchema, requestOptions);
  }

  /**
   * Interrupts and replaces an active call's BXML document
   *
   * @param accountId
   * @param callId
   * @param body
   * @return Response from the API call
   */
  async modifyCall(
    accountId: string,
    callId: string,
    body?: ApiModifyCallRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      accountId: [accountId, string()],
      callId: [callId, string()],
      body: [body, optional(apiModifyCallRequestSchema)],
    });
    req.json(mapped.body);
    req.appendTemplatePath`/api/v2/accounts/${mapped.accountId}/calls/${mapped.callId}`;
    req.throwOn(400, ApiErrorResponseError, 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.');
    req.throwOn(401, ApiError, 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.');
    req.throwOn(403, ApiErrorResponseError, 'User unauthorized to perform this action.');
    req.throwOn(404, ApiErrorResponseError, 'The resource specified cannot be found or does not belong to you.');
    req.throwOn(415, ApiErrorResponseError, 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.');
    req.throwOn(429, ApiErrorResponseError, 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.');
    req.throwOn(500, ApiErrorResponseError, 'Something unexpected happened. Please try again.');
    return req.call(requestOptions);
  }

  /**
   * Pauses or resumes a recording
   *
   * @param accountId
   * @param callId
   * @param body
   * @return Response from the API call
   */
  async modifyCallRecordingState(
    accountId: string,
    callId: string,
    body?: ModifyCallRecordingState,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      accountId: [accountId, string()],
      callId: [callId, string()],
      body: [body, optional(modifyCallRecordingStateSchema)],
    });
    req.json(mapped.body);
    req.appendTemplatePath`/api/v2/accounts/${mapped.accountId}/calls/${mapped.callId}/recording`;
    req.throwOn(400, ApiErrorResponseError, 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.');
    req.throwOn(401, ApiError, 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.');
    req.throwOn(403, ApiErrorResponseError, 'User unauthorized to perform this action.');
    req.throwOn(404, ApiErrorResponseError, 'The resource specified cannot be found or does not belong to you.');
    req.throwOn(415, ApiErrorResponseError, 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.');
    req.throwOn(429, ApiErrorResponseError, 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.');
    req.throwOn(500, ApiErrorResponseError, 'Something unexpected happened. Please try again.');
    return req.call(requestOptions);
  }

  /**
   * Returns a (potentially empty) list of metadata for the recordings that took place during the
   * specified call
   *
   * @param accountId
   * @param callId
   * @return Response from the API call
   */
  async getQueryMetadataForAccountAndCall(
    accountId: string,
    callId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<RecordingMetadataResponse[]>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      accountId: [accountId, string()],
      callId: [callId, string()],
    });
    req.appendTemplatePath`/api/v2/accounts/${mapped.accountId}/calls/${mapped.callId}/recordings`;
    req.throwOn(400, ApiErrorResponseError, 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.');
    req.throwOn(401, ApiError, 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.');
    req.throwOn(403, ApiErrorResponseError, 'User unauthorized to perform this action.');
    req.throwOn(404, ApiErrorResponseError, 'The resource specified cannot be found or does not belong to you.');
    req.throwOn(415, ApiErrorResponseError, 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.');
    req.throwOn(429, ApiErrorResponseError, 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.');
    req.throwOn(500, ApiErrorResponseError, 'Something unexpected happened. Please try again.');
    return req.callAsJson(
      array(recordingMetadataResponseSchema),
      requestOptions
    );
  }

  /**
   * Returns metadata for the specified recording
   *
   * @param accountId
   * @param callId
   * @param recordingId
   * @return Response from the API call
   */
  async getMetadataForRecording(
    accountId: string,
    callId: string,
    recordingId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<RecordingMetadataResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      accountId: [accountId, string()],
      callId: [callId, string()],
      recordingId: [recordingId, string()],
    });
    req.appendTemplatePath`/api/v2/accounts/${mapped.accountId}/calls/${mapped.callId}/recordings/${mapped.recordingId}`;
    req.throwOn(400, ApiErrorResponseError, 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.');
    req.throwOn(401, ApiError, 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.');
    req.throwOn(403, ApiErrorResponseError, 'User unauthorized to perform this action.');
    req.throwOn(404, ApiErrorResponseError, 'The resource specified cannot be found or does not belong to you.');
    req.throwOn(415, ApiErrorResponseError, 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.');
    req.throwOn(429, ApiErrorResponseError, 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.');
    req.throwOn(500, ApiErrorResponseError, 'Something unexpected happened. Please try again.');
    return req.callAsJson(recordingMetadataResponseSchema, requestOptions);
  }

  /**
   * Deletes the specified recording
   *
   * @param accountId
   * @param callId
   * @param recordingId
   * @return Response from the API call
   */
  async deleteRecording(
    accountId: string,
    callId: string,
    recordingId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      accountId: [accountId, string()],
      callId: [callId, string()],
      recordingId: [recordingId, string()],
    });
    req.appendTemplatePath`/api/v2/accounts/${mapped.accountId}/calls/${mapped.callId}/recordings/${mapped.recordingId}`;
    req.throwOn(400, ApiErrorResponseError, 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.');
    req.throwOn(401, ApiError, 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.');
    req.throwOn(403, ApiErrorResponseError, 'User unauthorized to perform this action.');
    req.throwOn(404, ApiErrorResponseError, 'The resource specified cannot be found or does not belong to you.');
    req.throwOn(415, ApiErrorResponseError, 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.');
    req.throwOn(429, ApiErrorResponseError, 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.');
    req.throwOn(500, ApiErrorResponseError, 'Something unexpected happened. Please try again.');
    return req.call(requestOptions);
  }

  /**
   * Downloads the specified recording
   *
   * @param accountId
   * @param callId
   * @param recordingId
   * @return Response from the API call
   */
  async getStreamRecordingMedia(
    accountId: string,
    callId: string,
    recordingId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<NodeJS.ReadableStream | Blob>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      accountId: [accountId, string()],
      callId: [callId, string()],
      recordingId: [recordingId, string()],
    });
    req.appendTemplatePath`/api/v2/accounts/${mapped.accountId}/calls/${mapped.callId}/recordings/${mapped.recordingId}/media`;
    req.throwOn(400, ApiErrorResponseError, 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.');
    req.throwOn(401, ApiError, 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.');
    req.throwOn(403, ApiErrorResponseError, 'User unauthorized to perform this action.');
    req.throwOn(404, ApiErrorResponseError, 'The resource specified cannot be found or does not belong to you.');
    req.throwOn(415, ApiErrorResponseError, 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.');
    req.throwOn(429, ApiErrorResponseError, 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.');
    req.throwOn(500, ApiErrorResponseError, 'Something unexpected happened. Please try again.');
    return req.callAsStream(requestOptions);
  }

  /**
   * Deletes the specified recording's media
   *
   * @param accountId
   * @param callId
   * @param recordingId
   * @return Response from the API call
   */
  async deleteRecordingMedia(
    accountId: string,
    callId: string,
    recordingId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      accountId: [accountId, string()],
      callId: [callId, string()],
      recordingId: [recordingId, string()],
    });
    req.appendTemplatePath`/api/v2/accounts/${mapped.accountId}/calls/${mapped.callId}/recordings/${mapped.recordingId}/media`;
    req.throwOn(400, ApiErrorResponseError, 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.');
    req.throwOn(401, ApiError, 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.');
    req.throwOn(403, ApiErrorResponseError, 'User unauthorized to perform this action.');
    req.throwOn(404, ApiErrorResponseError, 'The resource specified cannot be found or does not belong to you.');
    req.throwOn(415, ApiErrorResponseError, 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.');
    req.throwOn(429, ApiErrorResponseError, 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.');
    req.throwOn(500, ApiErrorResponseError, 'Something unexpected happened. Please try again.');
    return req.call(requestOptions);
  }

  /**
   * Downloads the specified transcription
   *
   * @param accountId
   * @param callId
   * @param recordingId
   * @return Response from the API call
   */
  async getRecordingTranscription(
    accountId: string,
    callId: string,
    recordingId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TranscriptionResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      accountId: [accountId, string()],
      callId: [callId, string()],
      recordingId: [recordingId, string()],
    });
    req.appendTemplatePath`/api/v2/accounts/${mapped.accountId}/calls/${mapped.callId}/recordings/${mapped.recordingId}/transcription`;
    req.throwOn(400, ApiErrorResponseError, 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.');
    req.throwOn(401, ApiError, 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.');
    req.throwOn(403, ApiErrorResponseError, 'User unauthorized to perform this action.');
    req.throwOn(404, ApiErrorResponseError, 'The resource specified cannot be found or does not belong to you.');
    req.throwOn(415, ApiErrorResponseError, 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.');
    req.throwOn(429, ApiErrorResponseError, 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.');
    req.throwOn(500, ApiErrorResponseError, 'Something unexpected happened. Please try again.');
    return req.callAsJson(transcriptionResponseSchema, requestOptions);
  }

  /**
   * Requests that the specified recording be transcribed
   *
   * @param accountId
   * @param callId
   * @param recordingId
   * @param body
   * @return Response from the API call
   */
  async createTranscribeRecording(
    accountId: string,
    callId: string,
    recordingId: string,
    body?: ApiTranscribeRecordingRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      accountId: [accountId, string()],
      callId: [callId, string()],
      recordingId: [recordingId, string()],
      body: [body, optional(apiTranscribeRecordingRequestSchema)],
    });
    req.json(mapped.body);
    req.appendTemplatePath`/api/v2/accounts/${mapped.accountId}/calls/${mapped.callId}/recordings/${mapped.recordingId}/transcription`;
    req.throwOn(400, ApiErrorResponseError, 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.');
    req.throwOn(401, ApiError, 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.');
    req.throwOn(403, ApiErrorResponseError, 'User unauthorized to perform this action.');
    req.throwOn(404, ApiErrorResponseError, 'The resource specified cannot be found or does not belong to you.');
    req.throwOn(410, ApiErrorResponseError, 'The media for this recording has been deleted, so we can\'t transcribe it');
    req.throwOn(415, ApiErrorResponseError, 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.');
    req.throwOn(429, ApiErrorResponseError, 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.');
    req.throwOn(500, ApiErrorResponseError, 'Something unexpected happened. Please try again.');
    return req.call(requestOptions);
  }

  /**
   * Deletes the specified recording's transcription
   *
   * @param accountId
   * @param callId
   * @param recordingId
   * @return Response from the API call
   */
  async deleteRecordingTranscription(
    accountId: string,
    callId: string,
    recordingId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      accountId: [accountId, string()],
      callId: [callId, string()],
      recordingId: [recordingId, string()],
    });
    req.appendTemplatePath`/api/v2/accounts/${mapped.accountId}/calls/${mapped.callId}/recordings/${mapped.recordingId}/transcription`;
    req.throwOn(400, ApiErrorResponseError, 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.');
    req.throwOn(401, ApiError, 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.');
    req.throwOn(403, ApiErrorResponseError, 'User unauthorized to perform this action.');
    req.throwOn(404, ApiErrorResponseError, 'The resource specified cannot be found or does not belong to you.');
    req.throwOn(415, ApiErrorResponseError, 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.');
    req.throwOn(429, ApiErrorResponseError, 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.');
    req.throwOn(500, ApiErrorResponseError, 'Something unexpected happened. Please try again.');
    return req.call(requestOptions);
  }

  /**
   * Returns information about the conferences in the account
   *
   * @param accountId
   * @param pageSize       Example: 1000
   * @param pageToken
   * @param name
   * @param minCreatedTime
   * @param maxCreatedTime
   * @return Response from the API call
   */
  async getConferencesByAccount(
    accountId: string,
    pageSize?: number,
    pageToken?: string,
    name?: string,
    minCreatedTime?: string,
    maxCreatedTime?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ConferenceDetail[]>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      accountId: [accountId, string()],
      pageSize: [pageSize, optional(number())],
      pageToken: [pageToken, optional(string())],
      name: [name, optional(string())],
      minCreatedTime: [minCreatedTime, optional(string())],
      maxCreatedTime: [maxCreatedTime, optional(string())],
    });
    req.query('pageSize', mapped.pageSize);
    req.query('pageToken', mapped.pageToken);
    req.query('name', mapped.name);
    req.query('minCreatedTime', mapped.minCreatedTime);
    req.query('maxCreatedTime', mapped.maxCreatedTime);
    req.appendTemplatePath`/api/v2/accounts/${mapped.accountId}/conferences`;
    req.throwOn(400, ApiErrorResponseError, 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.');
    req.throwOn(401, ApiError, 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.');
    req.throwOn(403, ApiErrorResponseError, 'User unauthorized to perform this action.');
    req.throwOn(404, ApiErrorResponseError, 'The resource specified cannot be found or does not belong to you.');
    req.throwOn(415, ApiErrorResponseError, 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.');
    req.throwOn(429, ApiErrorResponseError, 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.');
    req.throwOn(500, ApiErrorResponseError, 'Something unexpected happened. Please try again.');
    return req.callAsJson(array(conferenceDetailSchema), requestOptions);
  }

  /**
   * Returns information about the specified conference
   *
   * @param accountId
   * @param conferenceId
   * @return Response from the API call
   */
  async getConferenceById(
    accountId: string,
    conferenceId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ConferenceDetail>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      accountId: [accountId, string()],
      conferenceId: [conferenceId, string()],
    });
    req.appendTemplatePath`/api/v2/accounts/${mapped.accountId}/conferences/${mapped.conferenceId}`;
    req.throwOn(400, ApiErrorResponseError, 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.');
    req.throwOn(401, ApiError, 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.');
    req.throwOn(403, ApiErrorResponseError, 'User unauthorized to perform this action.');
    req.throwOn(404, ApiErrorResponseError, 'The resource specified cannot be found or does not belong to you.');
    req.throwOn(415, ApiErrorResponseError, 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.');
    req.throwOn(429, ApiErrorResponseError, 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.');
    req.throwOn(500, ApiErrorResponseError, 'Something unexpected happened. Please try again.');
    return req.callAsJson(conferenceDetailSchema, requestOptions);
  }

  /**
   * Modify the conference state
   *
   * @param accountId
   * @param conferenceId
   * @param body
   * @return Response from the API call
   */
  async modifyConference(
    accountId: string,
    conferenceId: string,
    body?: CallEngineModifyConferenceRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      accountId: [accountId, string()],
      conferenceId: [conferenceId, string()],
      body: [body, optional(callEngineModifyConferenceRequestSchema)],
    });
    req.json(mapped.body);
    req.appendTemplatePath`/api/v2/accounts/${mapped.accountId}/conferences/${mapped.conferenceId}`;
    req.throwOn(400, ApiErrorResponseError, 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.');
    req.throwOn(401, ApiError, 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.');
    req.throwOn(403, ApiErrorResponseError, 'User unauthorized to perform this action.');
    req.throwOn(404, ApiErrorResponseError, 'The resource specified cannot be found or does not belong to you.');
    req.throwOn(415, ApiErrorResponseError, 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.');
    req.throwOn(429, ApiErrorResponseError, 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.');
    req.throwOn(500, ApiErrorResponseError, 'Something unexpected happened. Please try again.');
    return req.call(requestOptions);
  }

  /**
   * Updates settings for a particular conference member
   *
   * @param accountId
   * @param conferenceId
   * @param callId
   * @param body
   * @return Response from the API call
   */
  async modifyConferenceMember(
    accountId: string,
    conferenceId: string,
    callId: string,
    body?: ConferenceMemberDetail,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      accountId: [accountId, string()],
      conferenceId: [conferenceId, string()],
      callId: [callId, string()],
      body: [body, optional(conferenceMemberDetailSchema)],
    });
    req.json(mapped.body);
    req.appendTemplatePath`/api/v2/accounts/${mapped.accountId}/conferences/${mapped.conferenceId}/members/${mapped.callId}`;
    req.throwOn(400, ApiErrorResponseError, 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.');
    req.throwOn(401, ApiError, 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.');
    req.throwOn(403, ApiErrorResponseError, 'User unauthorized to perform this action.');
    req.throwOn(404, ApiErrorResponseError, 'The resource specified cannot be found or does not belong to you.');
    req.throwOn(415, ApiErrorResponseError, 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.');
    req.throwOn(429, ApiErrorResponseError, 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.');
    req.throwOn(500, ApiErrorResponseError, 'Something unexpected happened. Please try again.');
    return req.call(requestOptions);
  }

  /**
   * Returns information about the specified conference member
   *
   * @param accountId
   * @param conferenceId
   * @param memberId
   * @return Response from the API call
   */
  async getConferenceMember(
    accountId: string,
    conferenceId: string,
    memberId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ConferenceMemberDetail>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      accountId: [accountId, string()],
      conferenceId: [conferenceId, string()],
      memberId: [memberId, string()],
    });
    req.appendTemplatePath`/api/v2/accounts/${mapped.accountId}/conferences/${mapped.conferenceId}/members/${mapped.memberId}`;
    req.throwOn(400, ApiErrorResponseError, 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.');
    req.throwOn(401, ApiError, 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.');
    req.throwOn(403, ApiErrorResponseError, 'User unauthorized to perform this action.');
    req.throwOn(404, ApiErrorResponseError, 'The resource specified cannot be found or does not belong to you.');
    req.throwOn(415, ApiErrorResponseError, 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.');
    req.throwOn(429, ApiErrorResponseError, 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.');
    req.throwOn(500, ApiErrorResponseError, 'Something unexpected happened. Please try again.');
    return req.callAsJson(conferenceMemberDetailSchema, requestOptions);
  }

  /**
   * Returns a (potentially empty) list of metadata for the recordings that took place during the
   * specified conference
   *
   * @param accountId
   * @param conferenceId
   * @return Response from the API call
   */
  async getQueryMetadataForAccountAndConference(
    accountId: string,
    conferenceId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ConferenceRecordingMetadataResponse[]>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      accountId: [accountId, string()],
      conferenceId: [conferenceId, string()],
    });
    req.appendTemplatePath`/api/v2/accounts/${mapped.accountId}/conferences/${mapped.conferenceId}/recordings`;
    req.throwOn(400, ApiErrorResponseError, 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.');
    req.throwOn(401, ApiError, 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.');
    req.throwOn(403, ApiErrorResponseError, 'User unauthorized to perform this action.');
    req.throwOn(404, ApiErrorResponseError, 'The resource specified cannot be found or does not belong to you.');
    req.throwOn(415, ApiErrorResponseError, 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.');
    req.throwOn(429, ApiErrorResponseError, 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.');
    req.throwOn(500, ApiErrorResponseError, 'Something unexpected happened. Please try again.');
    return req.callAsJson(
      array(conferenceRecordingMetadataResponseSchema),
      requestOptions
    );
  }

  /**
   * Returns metadata for the specified recording
   *
   * @param accountId
   * @param conferenceId
   * @param recordingId
   * @return Response from the API call
   */
  async getMetadataForConferenceRecording(
    accountId: string,
    conferenceId: string,
    recordingId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<RecordingMetadataResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      accountId: [accountId, string()],
      conferenceId: [conferenceId, string()],
      recordingId: [recordingId, string()],
    });
    req.appendTemplatePath`/api/v2/accounts/${mapped.accountId}/conferences/${mapped.conferenceId}/recordings/${mapped.recordingId}`;
    req.throwOn(400, ApiErrorResponseError, 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.');
    req.throwOn(401, ApiError, 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.');
    req.throwOn(403, ApiErrorResponseError, 'User unauthorized to perform this action.');
    req.throwOn(404, ApiErrorResponseError, 'The resource specified cannot be found or does not belong to you.');
    req.throwOn(415, ApiErrorResponseError, 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.');
    req.throwOn(429, ApiErrorResponseError, 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.');
    req.throwOn(500, ApiErrorResponseError, 'Something unexpected happened. Please try again.');
    return req.callAsJson(recordingMetadataResponseSchema, requestOptions);
  }

  /**
   * Downloads the specified recording
   *
   * @param accountId
   * @param conferenceId
   * @param recordingId
   * @return Response from the API call
   */
  async getStreamConferenceRecordingMedia(
    accountId: string,
    conferenceId: string,
    recordingId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<NodeJS.ReadableStream | Blob>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      accountId: [accountId, string()],
      conferenceId: [conferenceId, string()],
      recordingId: [recordingId, string()],
    });
    req.appendTemplatePath`/api/v2/accounts/${mapped.accountId}/conferences/${mapped.conferenceId}/recordings/${mapped.recordingId}/media`;
    req.throwOn(400, ApiErrorResponseError, 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.');
    req.throwOn(401, ApiError, 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.');
    req.throwOn(403, ApiErrorResponseError, 'User unauthorized to perform this action.');
    req.throwOn(404, ApiErrorResponseError, 'The resource specified cannot be found or does not belong to you.');
    req.throwOn(415, ApiErrorResponseError, 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.');
    req.throwOn(429, ApiErrorResponseError, 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.');
    req.throwOn(500, ApiErrorResponseError, 'Something unexpected happened. Please try again.');
    return req.callAsStream(requestOptions);
  }

  /**
   * Returns a list of metadata for the recordings associated with the specified account. The list can be
   * filtered by the optional from, to, minStartTime, and maxStartTime arguments. The list is capped at
   * 1000 entries and may be empty if no recordings match the specified criteria.
   *
   * @param accountId
   * @param from
   * @param to
   * @param minStartTime
   * @param maxStartTime
   * @return Response from the API call
   */
  async getQueryMetadataForAccount(
    accountId: string,
    from?: string,
    to?: string,
    minStartTime?: string,
    maxStartTime?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<RecordingMetadataResponse[]>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      accountId: [accountId, string()],
      from: [from, optional(string())],
      to: [to, optional(string())],
      minStartTime: [minStartTime, optional(string())],
      maxStartTime: [maxStartTime, optional(string())],
    });
    req.query('from', mapped.from);
    req.query('to', mapped.to);
    req.query('minStartTime', mapped.minStartTime);
    req.query('maxStartTime', mapped.maxStartTime);
    req.appendTemplatePath`/api/v2/accounts/${mapped.accountId}/recordings`;
    req.throwOn(400, ApiErrorResponseError, 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.');
    req.throwOn(401, ApiError, 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.');
    req.throwOn(403, ApiErrorResponseError, 'User unauthorized to perform this action.');
    req.throwOn(404, ApiErrorResponseError, 'The resource specified cannot be found or does not belong to you.');
    req.throwOn(415, ApiErrorResponseError, 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.');
    req.throwOn(429, ApiErrorResponseError, 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.');
    req.throwOn(500, ApiErrorResponseError, 'Something unexpected happened. Please try again.');
    return req.callAsJson(
      array(recordingMetadataResponseSchema),
      requestOptions
    );
  }
}
