/**
 * bandwidthLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  lazy,
  nullable,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import { DirectionEnum, directionEnumSchema } from './directionEnum';
import { FileFormatEnum, fileFormatEnumSchema } from './fileFormatEnum';
import {
  TranscriptionMetadata,
  transcriptionMetadataSchema,
} from './transcriptionMetadata';

export interface CallRecordingMetadata {
  applicationId?: string;
  accountId?: string;
  callId?: string;
  parentCallId?: string | null;
  recordingId?: string;
  to?: string;
  from?: string;
  transferCallerId?: string;
  transferTo?: string;
  /** Format is ISO-8601 */
  duration?: string;
  direction?: DirectionEnum;
  channels?: number;
  startTime?: string;
  endTime?: string;
  fileFormat?: FileFormatEnum;
  /** The current status of the recording. Current values are 'processing', 'partial', 'complete', 'deleted' and 'error'. Additional states may be added in the future, so your application must be tolerant of unknown values. */
  status?: string;
  mediaUrl?: string;
  transcription?: TranscriptionMetadata;
}

export const callRecordingMetadataSchema: Schema<CallRecordingMetadata> = object(
  {
    applicationId: ['applicationId', optional(string())],
    accountId: ['accountId', optional(string())],
    callId: ['callId', optional(string())],
    parentCallId: ['parentCallId', optional(nullable(string()))],
    recordingId: ['recordingId', optional(string())],
    to: ['to', optional(string())],
    from: ['from', optional(string())],
    transferCallerId: ['transferCallerId', optional(string())],
    transferTo: ['transferTo', optional(string())],
    duration: ['duration', optional(string())],
    direction: ['direction', optional(directionEnumSchema)],
    channels: ['channels', optional(number())],
    startTime: ['startTime', optional(string())],
    endTime: ['endTime', optional(string())],
    fileFormat: ['fileFormat', optional(fileFormatEnumSchema)],
    status: ['status', optional(string())],
    mediaUrl: ['mediaUrl', optional(string())],
    transcription: [
      'transcription',
      optional(lazy(() => transcriptionMetadataSchema)),
    ],
  }
);
