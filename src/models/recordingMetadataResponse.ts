/**
 * bandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

import { lazy, number, object, optional, Schema, string } from '../schema';
import { DirectionEnum, directionEnumSchema } from './directionEnum';
import { FileFormatEnum, fileFormatEnumSchema } from './fileFormatEnum';
import { Status1Enum, status1EnumSchema } from './status1Enum';
import { Transcription, transcriptionSchema } from './transcription';

export interface RecordingMetadataResponse {
  applicationId?: string;
  accountId?: string;
  callId?: string;
  parentCallId?: string;
  recordingId?: string;
  to?: string;
  from?: string;
  transferCallerId?: string;
  transferTo?: string;
  /** Format is ISO-8601 */
  duration?: string;
  direction?: DirectionEnum;
  channels?: number;
  startTime?: string;
  endTime?: string;
  fileFormat?: FileFormatEnum;
  status?: Status1Enum;
  mediaUrl?: string;
  transcription?: Transcription;
}

export const recordingMetadataResponseSchema: Schema<RecordingMetadataResponse> = object(
  {
    applicationId: ['applicationId', optional(string())],
    accountId: ['accountId', optional(string())],
    callId: ['callId', optional(string())],
    parentCallId: ['parentCallId', optional(string())],
    recordingId: ['recordingId', optional(string())],
    to: ['to', optional(string())],
    from: ['from', optional(string())],
    transferCallerId: ['transferCallerId', optional(string())],
    transferTo: ['transferTo', optional(string())],
    duration: ['duration', optional(string())],
    direction: ['direction', optional(directionEnumSchema)],
    channels: ['channels', optional(number())],
    startTime: ['startTime', optional(string())],
    endTime: ['endTime', optional(string())],
    fileFormat: ['fileFormat', optional(fileFormatEnumSchema)],
    status: ['status', optional(status1EnumSchema)],
    mediaUrl: ['mediaUrl', optional(string())],
    transcription: ['transcription', optional(lazy(() => transcriptionSchema))],
  }
);
