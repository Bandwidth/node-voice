/**
 * bandwidthLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  lazy,
  nullable,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import {
  AnswerFallbackMethodEnum,
  answerFallbackMethodEnumSchema,
} from './answerFallbackMethodEnum';
import { AnswerMethodEnum, answerMethodEnumSchema } from './answerMethodEnum';
import {
  DisconnectMethodEnum,
  disconnectMethodEnumSchema,
} from './disconnectMethodEnum';
import {
  MachineDetectionConfiguration,
  machineDetectionConfigurationSchema,
} from './machineDetectionConfiguration';

export interface CreateCallRequest {
  /** Format is E164 */
  from: string;
  /** Format is E164 or SIP URI */
  to: string;
  /** A comma-separated list of 'User-To-User' headers to be sent in the INVITE when calling a SIP URI. Each value must end with an 'encoding' parameter as described in https://tools.ietf.org/html/rfc7433. Only 'jwt' and 'base64' encodings are allowed. The entire value cannot exceed 350 characters, including parameters and separators. */
  uui?: string | null;
  callTimeout?: number | null;
  callbackTimeout?: number | null;
  answerUrl: string;
  answerFallbackUrl?: string | null;
  username?: string | null;
  password?: string | null;
  fallbackUsername?: string | null;
  fallbackPassword?: string | null;
  answerMethod?: AnswerMethodEnum | null;
  answerFallbackMethod?: AnswerFallbackMethodEnum | null;
  disconnectUrl?: string | null;
  disconnectMethod?: DisconnectMethodEnum | null;
  tag?: string | null;
  applicationId: string;
  machineDetection?: MachineDetectionConfiguration;
  priority?: number | null;
}

export const createCallRequestSchema: Schema<CreateCallRequest> = object({
  from: ['from', string()],
  to: ['to', string()],
  uui: ['uui', optional(nullable(string()))],
  callTimeout: ['callTimeout', optional(nullable(number()))],
  callbackTimeout: ['callbackTimeout', optional(nullable(number()))],
  answerUrl: ['answerUrl', string()],
  answerFallbackUrl: ['answerFallbackUrl', optional(nullable(string()))],
  username: ['username', optional(nullable(string()))],
  password: ['password', optional(nullable(string()))],
  fallbackUsername: ['fallbackUsername', optional(nullable(string()))],
  fallbackPassword: ['fallbackPassword', optional(nullable(string()))],
  answerMethod: ['answerMethod', optional(nullable(answerMethodEnumSchema))],
  answerFallbackMethod: [
    'answerFallbackMethod',
    optional(nullable(answerFallbackMethodEnumSchema)),
  ],
  disconnectUrl: ['disconnectUrl', optional(nullable(string()))],
  disconnectMethod: [
    'disconnectMethod',
    optional(nullable(disconnectMethodEnumSchema)),
  ],
  tag: ['tag', optional(nullable(string()))],
  applicationId: ['applicationId', string()],
  machineDetection: [
    'machineDetection',
    optional(lazy(() => machineDetectionConfigurationSchema)),
  ],
  priority: ['priority', optional(nullable(number()))]
});
