/**
 * bandwidthLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { nullable, number, object, optional, Schema, string } from '../schema';
import {
  AnswerFallbackMethodEnum,
  answerFallbackMethodEnumSchema,
} from './answerFallbackMethodEnum';
import { AnswerMethodEnum, answerMethodEnumSchema } from './answerMethodEnum';
import {
  DisconnectMethodEnum,
  disconnectMethodEnumSchema,
} from './disconnectMethodEnum';

export interface CreateCallRequest {
  /** Format is E164 */
  from: string;
  /** Format is E164 or SIP URI */
  to: string;
  /** When calling a SIP URI, this will be sent as the 'User-To-User' header within the initial INVITE. It must end with an 'encoding' parameter as described in https://tools.ietf.org/html/rfc7433. This header cannot exceed 256 characters, including the encoding parameter. */
  uui?: string | null;
  callTimeout?: number | null;
  callbackTimeout?: number | null;
  answerUrl: string;
  answerFallbackUrl?: string | null;
  username?: string | null;
  password?: string | null;
  fallbackUsername?: string | null;
  fallbackPassword?: string | null;
  answerMethod?: AnswerMethodEnum | null;
  answerFallbackMethod?: AnswerFallbackMethodEnum | null;
  disconnectUrl?: string | null;
  disconnectMethod?: DisconnectMethodEnum | null;
  tag?: string | null;
  applicationId: string;
}

export const createCallRequestSchema: Schema<CreateCallRequest> = object({
  from: ['from', string()],
  to: ['to', string()],
  uui: ['uui', optional(nullable(string()))],
  callTimeout: ['callTimeout', optional(nullable(number()))],
  callbackTimeout: ['callbackTimeout', optional(nullable(number()))],
  answerUrl: ['answerUrl', string()],
  answerFallbackUrl: ['answerFallbackUrl', optional(nullable(string()))],
  username: ['username', optional(nullable(string()))],
  password: ['password', optional(nullable(string()))],
  fallbackUsername: ['fallbackUsername', optional(nullable(string()))],
  fallbackPassword: ['fallbackPassword', optional(nullable(string()))],
  answerMethod: ['answerMethod', optional(nullable(answerMethodEnumSchema))],
  answerFallbackMethod: [
    'answerFallbackMethod',
    optional(nullable(answerFallbackMethodEnumSchema)),
  ],
  disconnectUrl: ['disconnectUrl', optional(nullable(string()))],
  disconnectMethod: [
    'disconnectMethod',
    optional(nullable(disconnectMethodEnumSchema)),
  ],
  tag: ['tag', optional(nullable(string()))],
  applicationId: ['applicationId', string()],
});
