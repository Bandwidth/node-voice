/**
 * VoiceLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of RecordingMetadataResponse
 */
class RecordingMetadataResponse extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.applicationId = this.constructor.getValue(obj.applicationId);
        this.accountId = this.constructor.getValue(obj.accountId);
        this.callId = this.constructor.getValue(obj.callId);
        this.parentCallId = this.constructor.getValue(obj.parentCallId);
        this.recordingId = this.constructor.getValue(obj.recordingId);
        this.to = this.constructor.getValue(obj.to);
        this.from = this.constructor.getValue(obj.from);
        this.transferCallerId = this.constructor.getValue(obj.transferCallerId);
        this.transferTo = this.constructor.getValue(obj.transferTo);
        this.duration = this.constructor.getValue(obj.duration);
        this.direction = this.constructor.getValue(obj.direction);
        this.channels = this.constructor.getValue(obj.channels);
        this.startTime = this.constructor.getValue(obj.startTime);
        this.endTime = this.constructor.getValue(obj.endTime);
        this.fileFormat = this.constructor.getValue(obj.fileFormat);
        this.status = this.constructor.getValue(obj.status);
        this.mediaUrl = this.constructor.getValue(obj.mediaUrl);
        this.transcription = this.constructor.getValue(obj.transcription);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'applicationId', realName: 'applicationId' },
            { name: 'accountId', realName: 'accountId' },
            { name: 'callId', realName: 'callId' },
            { name: 'parentCallId', realName: 'parentCallId' },
            { name: 'recordingId', realName: 'recordingId' },
            { name: 'to', realName: 'to' },
            { name: 'from', realName: 'from' },
            { name: 'transferCallerId', realName: 'transferCallerId' },
            { name: 'transferTo', realName: 'transferTo' },
            { name: 'duration', realName: 'duration' },
            { name: 'direction', realName: 'direction' },
            { name: 'channels', realName: 'channels' },
            {
                name: 'startTime',
                realName: 'startTime',
                isDateTime: true,
                dateTimeValue: 'rfc3339',
            },
            { name: 'endTime', realName: 'endTime', isDateTime: true, dateTimeValue: 'rfc3339' },
            { name: 'fileFormat', realName: 'fileFormat' },
            { name: 'status', realName: 'status' },
            { name: 'mediaUrl', realName: 'mediaUrl' },
            { name: 'transcription', realName: 'transcription', type: 'Transcription' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = RecordingMetadataResponse;
