/**
 * VoiceLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');

class APIController {
    /**
     * Creates a call request
     *
     * @param {string} accountId TODO: type description here
     * @param {ApiCreateCallRequest} body (optional) TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createCall(accountId, body, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/v2/accounts/{accountId}/calls';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            accountId,
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            body: _apiHelper.jsonSerialize(body),
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                let response = '';
                if (_context.response.body) {
                    response = JSON.parse(_context.response.body);
                }
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'ApiCallResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'Something didn\'t look right about that request. Please fix it before trying again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something didn\'t look right about that request. Please fix it before trying again.',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Please authenticate yourself',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'We don\'t support that media type. Please send us `application/json`.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'We don\'t support that media type. Please send us `application/json`.',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 429) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.',
                        errorCode: 429,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'Something unexpected happened. Please try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something unexpected happened. Please try again.',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Interrupts and replaces an active call's BXML document
     *
     * @param {string} accountId TODO: type description here
     * @param {string} callId TODO: type description here
     * @param {ApiModifyCallRequest} body (optional) TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static modifyCall(accountId, callId, body, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/v2/accounts/{accountId}/calls/{callId}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            accountId,
            callId,
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'content-type': 'application/json; charset=utf-8',
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            body: _apiHelper.jsonSerialize(body),
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                let response = '';
                if (_context.response.body) {
                    response = JSON.parse(_context.response.body);
                }
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, null, _context);
                    _fulfill();
                } else if (_response.statusCode === 400) {
                    const _err = { errorMessage: 'The call can\'t be modified in its current state',
                        errorCode: 400,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Please authenticate yourself',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const _err = { errorMessage: 'The call never existed, no longer exists, or is inaccessible to you',
                        errorCode: 404,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'We don\'t support that media type. Please send us `application/json`.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'We don\'t support that media type. Please send us `application/json`.',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 429) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.',
                        errorCode: 429,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'Something unexpected happened. Please try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something unexpected happened. Please try again.',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Pauses or resumes a recording
     *
     * @param {string} accountId TODO: type description here
     * @param {string} callId TODO: type description here
     * @param {ModifyCallRecordingState} body (optional) TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static modifyCallRecordingState(accountId, callId, body, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/v2/accounts/{accountId}/calls/{callId}/recording';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            accountId,
            callId,
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'content-type': 'application/json; charset=utf-8',
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'PUT',
            headers: _headers,
            body: _apiHelper.jsonSerialize(body),
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                let response = '';
                if (_context.response.body) {
                    response = JSON.parse(_context.response.body);
                }
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, null, _context);
                    _fulfill();
                } else if (_response.statusCode === 400) {
                    const _err = { errorMessage: 'The call can\'t be modified in its current state',
                        errorCode: 400,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Please authenticate yourself',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const _err = { errorMessage: 'The call never existed, no longer exists, or is inaccessible to you',
                        errorCode: 404,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'We don\'t support that media type. Please send us `application/json`.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'We don\'t support that media type. Please send us `application/json`.',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 429) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.',
                        errorCode: 429,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'Something unexpected happened. Please try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something unexpected happened. Please try again.',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Returns a (potentially empty) list of metadata for the recordings that took place during
     * the specified call
     *
     * @param {string} accountId TODO: type description here
     * @param {string} callId TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getQueryMetadataForAccountAndCall(accountId, callId, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/v2/accounts/{accountId}/calls/{callId}/recordings';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            accountId,
            callId,
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                let response = '';
                if (_context.response.body) {
                    response = JSON.parse(_context.response.body);
                }
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = parsed.map(model =>
                        _baseController.getObjectMapper().mapObject(model, 'RecordingMetadataResponse'));
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'Something didn\'t look right about that request. Please fix it before trying again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something didn\'t look right about that request. Please fix it before trying again.',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Please authenticate yourself',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'We don\'t support that media type. Please send us `application/json`.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'We don\'t support that media type. Please send us `application/json`.',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 429) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.',
                        errorCode: 429,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'Something unexpected happened. Please try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something unexpected happened. Please try again.',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Returns metadata for the specified recording
     *
     * @param {string} accountId TODO: type description here
     * @param {string} callId TODO: type description here
     * @param {string} recordingId TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getMetadataForRecording(accountId, callId, recordingId, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            accountId,
            callId,
            recordingId,
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                let response = '';
                if (_context.response.body) {
                    response = JSON.parse(_context.response.body);
                }
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'RecordingMetadataResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'Something didn\'t look right about that request. Please fix it before trying again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something didn\'t look right about that request. Please fix it before trying again.',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Please authenticate yourself',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const _err = { errorMessage: 'The recording never existed, no longer exists, or is inaccessible to you',
                        errorCode: 404,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'We don\'t support that media type. Please send us `application/json`.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'We don\'t support that media type. Please send us `application/json`.',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 429) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.',
                        errorCode: 429,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'Something unexpected happened. Please try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something unexpected happened. Please try again.',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Deletes the specified recording
     *
     * @param {string} accountId TODO: type description here
     * @param {string} callId TODO: type description here
     * @param {string} recordingId TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static deleteRecording(accountId, callId, recordingId, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            accountId,
            callId,
            recordingId,
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'DELETE',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                let response = '';
                if (_context.response.body) {
                    response = JSON.parse(_context.response.body);
                }
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, null, _context);
                    _fulfill();
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'Something didn\'t look right about that request. Please fix it before trying again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something didn\'t look right about that request. Please fix it before trying again.',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Please authenticate yourself',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const _err = { errorMessage: 'The recording never existed, no longer exists, or is inaccessible to you',
                        errorCode: 404,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'We don\'t support that media type. Please send us `application/json`.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'We don\'t support that media type. Please send us `application/json`.',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 429) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.',
                        errorCode: 429,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'Something unexpected happened. Please try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something unexpected happened. Please try again.',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Downloads the specified recording
     *
     * @param {string} accountId TODO: type description here
     * @param {string} callId TODO: type description here
     * @param {string} recordingId TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getStreamRecordingMedia(accountId, callId, recordingId, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            accountId,
            callId,
            recordingId,
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                let response = '';
                if (_context.response.body) {
                    response = _context.response.body;
                }
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'Something didn\'t look right about that request. Please fix it before trying again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something didn\'t look right about that request. Please fix it before trying again.',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Please authenticate yourself',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const _err = { errorMessage: 'The recording never existed, no longer exists, or is inaccessible to you',
                        errorCode: 404,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'We don\'t support that media type. Please send us `application/json`.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'We don\'t support that media type. Please send us `application/json`.',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 429) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.',
                        errorCode: 429,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'Something unexpected happened. Please try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something unexpected happened. Please try again.',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Returns a (potentially empty; capped at 1000) list of metadata for the recordings
     * associated with the specified account
     *
     * @param {string} accountId TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getQueryMetadataForAccount(accountId, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/v2/accounts/{accountId}/recordings';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            accountId,
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                let response = '';
                if (_context.response.body) {
                    response = JSON.parse(_context.response.body);
                }
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = parsed.map(model =>
                        _baseController.getObjectMapper().mapObject(model, 'RecordingMetadataResponse'));
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'Something didn\'t look right about that request. Please fix it before trying again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something didn\'t look right about that request. Please fix it before trying again.',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Please authenticate yourself',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'We don\'t support that media type. Please send us `application/json`.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'We don\'t support that media type. Please send us `application/json`.',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 429) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.',
                        errorCode: 429,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorResponseException');
                    mappedObject.reason = 'Something unexpected happened. Please try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something unexpected happened. Please try again.',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
}
module.exports = APIController;
