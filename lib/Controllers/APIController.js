/**
 * VoiceLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');

class APIController {
    /**
     * Creates an outbound call
     *
     * @param {string} accountId TODO: type description here
     * @param {ApiCreateCallRequest} body (optional) TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createCall(accountId, body, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/v2/accounts/{accountId}/calls';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            accountId: { value: accountId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'user-agent': 'node-voice',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            body: _apiHelper.jsonSerialize(body),
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'ApiCallResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'User unauthorized to perform this action.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'User unauthorized to perform this action.',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'The resource specified cannot be found or does not belong to you.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The resource specified cannot be found or does not belong to you.',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 429) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.',
                        errorCode: 429,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something unexpected happened. Please try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something unexpected happened. Please try again.',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Returns near-realtime metadata about the specified call
     *
     * @param {string} accountId TODO: type description here
     * @param {string} callId TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getCallState(accountId, callId, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/v2/accounts/{accountId}/calls/{callId}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            accountId: { value: accountId, encode: true },
            callId: { value: callId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'node-voice',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'ApiCallStateResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'User unauthorized to perform this action.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'User unauthorized to perform this action.',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'The resource specified cannot be found or does not belong to you.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The resource specified cannot be found or does not belong to you.',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 429) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.',
                        errorCode: 429,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something unexpected happened. Please try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something unexpected happened. Please try again.',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Interrupts and replaces an active call's BXML document
     *
     * @param {string} accountId TODO: type description here
     * @param {string} callId TODO: type description here
     * @param {ApiModifyCallRequest} body (optional) TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static modifyCall(accountId, callId, body, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/v2/accounts/{accountId}/calls/{callId}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            accountId: { value: accountId, encode: true },
            callId: { value: callId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'content-type': 'application/json; charset=utf-8',
            'user-agent': 'node-voice',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            body: _apiHelper.jsonSerialize(body),
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, null, _context);
                    _fulfill();
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'User unauthorized to perform this action.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'User unauthorized to perform this action.',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'The resource specified cannot be found or does not belong to you.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The resource specified cannot be found or does not belong to you.',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 429) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.',
                        errorCode: 429,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something unexpected happened. Please try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something unexpected happened. Please try again.',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Pauses or resumes a recording
     *
     * @param {string} accountId TODO: type description here
     * @param {string} callId TODO: type description here
     * @param {ModifyCallRecordingState} body (optional) TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static modifyCallRecordingState(accountId, callId, body, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/v2/accounts/{accountId}/calls/{callId}/recording';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            accountId: { value: accountId, encode: true },
            callId: { value: callId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'content-type': 'application/json; charset=utf-8',
            'user-agent': 'node-voice',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'PUT',
            headers: _headers,
            body: _apiHelper.jsonSerialize(body),
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, null, _context);
                    _fulfill();
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'User unauthorized to perform this action.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'User unauthorized to perform this action.',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'The resource specified cannot be found or does not belong to you.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The resource specified cannot be found or does not belong to you.',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 429) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.',
                        errorCode: 429,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something unexpected happened. Please try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something unexpected happened. Please try again.',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Returns a (potentially empty) list of metadata for the recordings that took place during
     * the specified call
     *
     * @param {string} accountId TODO: type description here
     * @param {string} callId TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getQueryMetadataForAccountAndCall(accountId, callId, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/v2/accounts/{accountId}/calls/{callId}/recordings';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            accountId: { value: accountId, encode: true },
            callId: { value: callId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'node-voice',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = parsed.map(model =>
                        _baseController.getObjectMapper().mapObject(model, 'RecordingMetadataResponse'));
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'User unauthorized to perform this action.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'User unauthorized to perform this action.',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'The resource specified cannot be found or does not belong to you.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The resource specified cannot be found or does not belong to you.',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 429) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.',
                        errorCode: 429,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something unexpected happened. Please try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something unexpected happened. Please try again.',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Returns metadata for the specified recording
     *
     * @param {string} accountId TODO: type description here
     * @param {string} callId TODO: type description here
     * @param {string} recordingId TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getMetadataForRecording(accountId, callId, recordingId, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            accountId: { value: accountId, encode: true },
            callId: { value: callId, encode: true },
            recordingId: { value: recordingId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'node-voice',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'RecordingMetadataResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'User unauthorized to perform this action.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'User unauthorized to perform this action.',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'The resource specified cannot be found or does not belong to you.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The resource specified cannot be found or does not belong to you.',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 429) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.',
                        errorCode: 429,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something unexpected happened. Please try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something unexpected happened. Please try again.',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Deletes the specified recording
     *
     * @param {string} accountId TODO: type description here
     * @param {string} callId TODO: type description here
     * @param {string} recordingId TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static deleteRecording(accountId, callId, recordingId, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            accountId: { value: accountId, encode: true },
            callId: { value: callId, encode: true },
            recordingId: { value: recordingId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'user-agent': 'node-voice',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'DELETE',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, null, _context);
                    _fulfill();
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'User unauthorized to perform this action.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'User unauthorized to perform this action.',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'The resource specified cannot be found or does not belong to you.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The resource specified cannot be found or does not belong to you.',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 429) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.',
                        errorCode: 429,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something unexpected happened. Please try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something unexpected happened. Please try again.',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Downloads the specified recording
     *
     * @param {string} accountId TODO: type description here
     * @param {string} callId TODO: type description here
     * @param {string} recordingId TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getStreamRecordingMedia(accountId, callId, recordingId, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            accountId: { value: accountId, encode: true },
            callId: { value: callId, encode: true },
            recordingId: { value: recordingId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'user-agent': 'node-voice',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'User unauthorized to perform this action.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'User unauthorized to perform this action.',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'The resource specified cannot be found or does not belong to you.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The resource specified cannot be found or does not belong to you.',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 429) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.',
                        errorCode: 429,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something unexpected happened. Please try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something unexpected happened. Please try again.',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Deletes the specified recording's media
     *
     * @param {string} accountId TODO: type description here
     * @param {string} callId TODO: type description here
     * @param {string} recordingId TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static deleteRecordingMedia(accountId, callId, recordingId, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            accountId: { value: accountId, encode: true },
            callId: { value: callId, encode: true },
            recordingId: { value: recordingId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'user-agent': 'node-voice',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'DELETE',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, null, _context);
                    _fulfill();
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'User unauthorized to perform this action.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'User unauthorized to perform this action.',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'The resource specified cannot be found or does not belong to you.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The resource specified cannot be found or does not belong to you.',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 429) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.',
                        errorCode: 429,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something unexpected happened. Please try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something unexpected happened. Please try again.',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Downloads the specified transcription
     *
     * @param {string} accountId TODO: type description here
     * @param {string} callId TODO: type description here
     * @param {string} recordingId TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getRecordingTranscription(accountId, callId, recordingId, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            accountId: { value: accountId, encode: true },
            callId: { value: callId, encode: true },
            recordingId: { value: recordingId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'node-voice',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'TranscriptionResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'User unauthorized to perform this action.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'User unauthorized to perform this action.',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'The resource specified cannot be found or does not belong to you.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The resource specified cannot be found or does not belong to you.',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 429) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.',
                        errorCode: 429,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something unexpected happened. Please try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something unexpected happened. Please try again.',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Requests that the specified recording be transcribed
     *
     * @param {string} accountId TODO: type description here
     * @param {string} callId TODO: type description here
     * @param {string} recordingId TODO: type description here
     * @param {ApiTranscribeRecordingRequest} body (optional) TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createTranscribeRecording(accountId, callId, recordingId, body, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            accountId: { value: accountId, encode: true },
            callId: { value: callId, encode: true },
            recordingId: { value: recordingId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'content-type': 'application/json; charset=utf-8',
            'user-agent': 'node-voice',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            body: _apiHelper.jsonSerialize(body),
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, null, _context);
                    _fulfill();
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'User unauthorized to perform this action.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'User unauthorized to perform this action.',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'The resource specified cannot be found or does not belong to you.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The resource specified cannot be found or does not belong to you.',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 410) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'The media for this recording has been deleted, so we can\'t transcribe it';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The media for this recording has been deleted, so we can\'t transcribe it',
                        errorCode: 410,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 429) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.',
                        errorCode: 429,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something unexpected happened. Please try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something unexpected happened. Please try again.',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Deletes the specified recording's transcription
     *
     * @param {string} accountId TODO: type description here
     * @param {string} callId TODO: type description here
     * @param {string} recordingId TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static deleteRecordingTranscription(accountId, callId, recordingId, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            accountId: { value: accountId, encode: true },
            callId: { value: callId, encode: true },
            recordingId: { value: recordingId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'user-agent': 'node-voice',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'DELETE',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, null, _context);
                    _fulfill();
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'User unauthorized to perform this action.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'User unauthorized to perform this action.',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'The resource specified cannot be found or does not belong to you.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The resource specified cannot be found or does not belong to you.',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 429) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.',
                        errorCode: 429,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something unexpected happened. Please try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something unexpected happened. Please try again.',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Returns information about the conferences in the account
     *
     * @param {string} accountId TODO: type description here
     * @param {int} pageSize (optional) Example: 1000
     * @param {string} pageToken (optional) TODO: type description here
     * @param {string} name (optional) TODO: type description here
     * @param {string} minCreatedTime (optional) TODO: type description here
     * @param {string} maxCreatedTime (optional) TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getConferencesByAccount(accountId,
        pageSize,
        pageToken,
        name,
        minCreatedTime,
        maxCreatedTime,
        callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/v2/accounts/{accountId}/conferences';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            accountId: { value: accountId, encode: true },
        });

        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            pageSize: (pageSize !== null) ? pageSize : 1000,
            pageToken,
            name,
            minCreatedTime,
            maxCreatedTime,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'node-voice',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = parsed.map(model =>
                        _baseController.getObjectMapper().mapObject(model, 'ConferenceDetail'));
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'User unauthorized to perform this action.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'User unauthorized to perform this action.',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'The resource specified cannot be found or does not belong to you.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The resource specified cannot be found or does not belong to you.',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 429) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.',
                        errorCode: 429,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something unexpected happened. Please try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something unexpected happened. Please try again.',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Returns information about the specified conference
     *
     * @param {string} accountId TODO: type description here
     * @param {string} conferenceId TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getConferenceById(accountId, conferenceId, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/v2/accounts/{accountId}/conferences/{conferenceId}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            accountId: { value: accountId, encode: true },
            conferenceId: { value: conferenceId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'node-voice',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'ConferenceDetail');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'User unauthorized to perform this action.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'User unauthorized to perform this action.',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'The resource specified cannot be found or does not belong to you.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The resource specified cannot be found or does not belong to you.',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 429) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.',
                        errorCode: 429,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something unexpected happened. Please try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something unexpected happened. Please try again.',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Modify the conference state
     *
     * @param {string} accountId TODO: type description here
     * @param {string} conferenceId TODO: type description here
     * @param {CallEngineModifyConferenceRequest} body (optional) TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static modifyConference(accountId, conferenceId, body, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/v2/accounts/{accountId}/conferences/{conferenceId}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            accountId: { value: accountId, encode: true },
            conferenceId: { value: conferenceId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'content-type': 'application/json; charset=utf-8',
            'user-agent': 'node-voice',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            body: _apiHelper.jsonSerialize(body),
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, null, _context);
                    _fulfill();
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'User unauthorized to perform this action.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'User unauthorized to perform this action.',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'The resource specified cannot be found or does not belong to you.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The resource specified cannot be found or does not belong to you.',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 429) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.',
                        errorCode: 429,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something unexpected happened. Please try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something unexpected happened. Please try again.',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Updates settings for a particular conference member
     *
     * @param {string} accountId TODO: type description here
     * @param {string} conferenceId TODO: type description here
     * @param {string} callId TODO: type description here
     * @param {ConferenceMemberDetail} body (optional) TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static modifyConferenceMember(accountId, conferenceId, callId, body, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/v2/accounts/{accountId}/conferences/{conferenceId}/members/{callId}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            accountId: { value: accountId, encode: true },
            conferenceId: { value: conferenceId, encode: true },
            callId: { value: callId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'content-type': 'application/json; charset=utf-8',
            'user-agent': 'node-voice',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'PUT',
            headers: _headers,
            body: _apiHelper.jsonSerialize(body),
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, null, _context);
                    _fulfill();
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'User unauthorized to perform this action.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'User unauthorized to perform this action.',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'The resource specified cannot be found or does not belong to you.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The resource specified cannot be found or does not belong to you.',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 429) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.',
                        errorCode: 429,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something unexpected happened. Please try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something unexpected happened. Please try again.',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Returns information about the specified conference member
     *
     * @param {string} accountId TODO: type description here
     * @param {string} conferenceId TODO: type description here
     * @param {string} memberId TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getConferenceMember(accountId, conferenceId, memberId, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/v2/accounts/{accountId}/conferences/{conferenceId}/members/{memberId}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            accountId: { value: accountId, encode: true },
            conferenceId: { value: conferenceId, encode: true },
            memberId: { value: memberId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'node-voice',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'ConferenceMemberDetail');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'User unauthorized to perform this action.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'User unauthorized to perform this action.',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'The resource specified cannot be found or does not belong to you.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The resource specified cannot be found or does not belong to you.',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 429) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.',
                        errorCode: 429,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something unexpected happened. Please try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something unexpected happened. Please try again.',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Returns a (potentially empty) list of metadata for the recordings that took place during
     * the specified conference
     *
     * @param {string} accountId TODO: type description here
     * @param {string} conferenceId TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getQueryMetadataForAccountAndConference(accountId, conferenceId, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/v2/accounts/{accountId}/conferences/{conferenceId}/recordings';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            accountId: { value: accountId, encode: true },
            conferenceId: { value: conferenceId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'node-voice',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = parsed.map(model =>
                        _baseController.getObjectMapper().mapObject(model, 'ConferenceRecordingMetadataResponse'));
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'User unauthorized to perform this action.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'User unauthorized to perform this action.',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'The resource specified cannot be found or does not belong to you.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The resource specified cannot be found or does not belong to you.',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 429) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.',
                        errorCode: 429,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something unexpected happened. Please try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something unexpected happened. Please try again.',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Returns metadata for the specified recording
     *
     * @param {string} accountId TODO: type description here
     * @param {string} conferenceId TODO: type description here
     * @param {string} recordingId TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getMetadataForConferenceRecording(accountId, conferenceId, recordingId, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/v2/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            accountId: { value: accountId, encode: true },
            conferenceId: { value: conferenceId, encode: true },
            recordingId: { value: recordingId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'node-voice',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'RecordingMetadataResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'User unauthorized to perform this action.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'User unauthorized to perform this action.',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'The resource specified cannot be found or does not belong to you.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The resource specified cannot be found or does not belong to you.',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 429) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.',
                        errorCode: 429,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something unexpected happened. Please try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something unexpected happened. Please try again.',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Downloads the specified recording
     *
     * @param {string} accountId TODO: type description here
     * @param {string} conferenceId TODO: type description here
     * @param {string} recordingId TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getStreamConferenceRecordingMedia(accountId, conferenceId, recordingId, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/v2/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}/media';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            accountId: { value: accountId, encode: true },
            conferenceId: { value: conferenceId, encode: true },
            recordingId: { value: recordingId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'user-agent': 'node-voice',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'User unauthorized to perform this action.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'User unauthorized to perform this action.',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'The resource specified cannot be found or does not belong to you.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The resource specified cannot be found or does not belong to you.',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 429) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.',
                        errorCode: 429,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something unexpected happened. Please try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something unexpected happened. Please try again.',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Returns a list of metadata for the recordings associated with the specified account. The
     * list can be filtered by the optional from, to, minStartTime, and maxStartTime arguments.
     * The list is capped at 1000 entries and may be empty if no recordings match the specified
     * criteria.
     *
     * @param {string} accountId TODO: type description here
     * @param {string} from (optional) TODO: type description here
     * @param {string} to (optional) TODO: type description here
     * @param {string} minStartTime (optional) TODO: type description here
     * @param {string} maxStartTime (optional) TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getQueryMetadataForAccount(accountId, from, to, minStartTime, maxStartTime, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/v2/accounts/{accountId}/recordings';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            accountId: { value: accountId, encode: true },
        });

        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            from,
            to,
            minStartTime,
            maxStartTime,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'node-voice',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = parsed.map(model =>
                        _baseController.getObjectMapper().mapObject(model, 'RecordingMetadataResponse'));
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'User unauthorized to perform this action.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'User unauthorized to perform this action.',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'The resource specified cannot be found or does not belong to you.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The resource specified cannot be found or does not belong to you.',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'We don\'t support that media type. If a request body is required, please send it to us as `application/json`.',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 429) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.',
                        errorCode: 429,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ApiErrorResponseException');
                    mappedObject.reason = 'Something unexpected happened. Please try again.';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Something unexpected happened. Please try again.',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
}
module.exports = APIController;
